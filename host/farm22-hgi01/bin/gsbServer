#!/bin/bash

if [ "$(hostname)" != "farm22-hgi01" ]; then
	echo "This script should only be run on farm22-hgi01!" >&2;

	exit 1;
fi;

export WR_CONFIG_DIR=/nfs/hgi/wr/openstack;
source /hgi/secrets/mercury-theta-hgi-softpack-openrc.sh

declare WR_PID="";
declare SOFTPACK_CONFIG=~/.softpack/builder/gsb-config.yml;
declare GSBBASE="/nfs/hgi/softpack/gsb/";
declare PIDFILE="$GSBBASE/pid";
declare LOGOUT="$GSBBASE/log.out";
declare LOGERR="$GSBBASE/log.err";

start() {
	if [ ! -f "$SOFTPACK_CONFIG" ]; then
		echo "SoftPack Builder Configuration File Missing!" >&2;

		exit 1;
	fi;

	/software/hgi/installs/wr/wr status --deployment production &> /dev/null || {
		echo "Starting WR in OpenStack...";

		declare tmp="$(mktemp)";

		cleanup() {
			unlink "$tmp";
		}

		trap cleanup EXIT;

		echo -e "#!/bin/bash\nchmod -R go-rwx ~/spack/opt/spack/" > "$tmp";

		/software/hgi/installs/wr/wr cloud deploy --manager_flavor m2.large --config_files "~/.s3cfg,~/.aws/credentials,~/.aws/config,$(find /software/hgi/installs/softpack/spack/gpg/ -type f | while read file;do echo "$file:~/spack/opt/spack/${file:38}";done | tr '\n' ',' | sed -e 's/,$//')" --script "$tmp" && {
			declare ip="$(~/bin/wr_cloud_ips /nfs/hgi/wr/openstack/.wr_production/cloud_resources.openstack.wr-prod-mercury)";

			ssh-keygen -f "/nfs/users/nfs_m/mercury/.ssh/known_hosts" -R "$ip" && ssh -i /nfs/hgi/wr/openstack/.wr_production/cloud_resources.openstack.key -o "StrictHostKeyChecking=accept-new" ubuntu@"$ip" echo;
		} || exit 1;
	}

	if [ -e "$PIDFILE" ]; then
		ps -P "$(cat "$PIDFILE")" &> /dev/null && {
			echo "GSB Already Running";

			exit 0;
		}
	fi;

	echo "Starting GSB Server...";

	export PATH="/software/hgi/installs/wr/:/software/singularity/3.11.4/bin/:/software/singularity/v3.10.0/bin/";
	/software/hgi/installs/daemonize/daemonize -p "$PIDFILE" -a -e "$LOGERR" -o "$LOGOUT" /software/hgi/installs/softpack/gsb-build/gsb server;

	echo "...Done";
}

stop() {
	if [ -e "$PIDFILE" ]; then
		declare PID="$(cat "$PIDFILE")";
		ps -P "$PID" &> /dev/null && {
			kill "$PID" && echo "GSB Stopped" || echo "GSB  could not be stopped";

			exit 0;
		}
	fi;

	echo "GSB Not Running";
}

fullstop() {
	/software/hgi/installs/wr/wr status --deployment production &> /dev/null && {
		echo "Stopping WR in OpenStack...";

		wr cloud teardown

		echo "...Done";
	}

	stop;
}

building() {
	ssh -i /nfs/hgi/wr/openstack/.wr_production/cloud_resources.openstack.key ubuntu@"$(~/bin/wr_cloud_ips /nfs/hgi/wr/openstack/.wr_production/cloud_resources.openstack.wr-prod-mercury)" "$(sed -n -e '/^exit/,${//!p}' "$0")";
}

buildlog() {
	echo -n "Enter environment path: "
	read envpath;
	echo -n "Enter environment version: ";
	read version;

	{
		s3cmd get "s3://spack/builds/$envpath/$version/builder.out" - 2> /dev/null ||
		echo "Build log not found";
	} | less +G
}

clearBuried() {
	wr remove -ab;
}

case "${1:-}" in
"start") start;;
"stop") stop;;
"fullstop") fullstop;;
"building") building;;
"buildlog") buildlog;;
"status") [ -e "$PIDFILE" ] && ps -P "$(cat "$PIDFILE")" &> /dev/null && echo "Running" || echo "Not Running";;
"logout") less +G "$LOGOUT";;
"logerr") less +G "$LOGERR";;
"clearburied") clearBuried;;
*)
	cat <<HEREDOC
Usage: $0 start|stop|fullstop|logout|logerr

Subcommand
  start       Start GSB.
  stop        Stop GSB.
  fullstop    Stop GSB and WR cloud deployment.
  status      Prints whether GSB is running or not.
  building    Show build logs for active builds.
  buildlog    Show the build log for an environment.
  clearburied Clear buried items in WR.
  logout      Show the standard output log (useful for debugging).
  logerr      Show the standard error log (useful for debugging).
HEREDOC
esac;

exit 0;

declare logs=()
while read log; do
	logs+=("$log");
done < <(ps aux 2>&1 | grep "sudo singularity build --bind /tmp/[^ ]*:/tmp /tmp/wr_cwd/" | sed -e 's@.*sudo singularity build --bind /tmp/[^ ]*:/tmp \(/tmp/wr_cwd/.*/tmp/\)singularity.sif.*@\1builder.out@');

if [ "${#logs[@]}" -eq 0 ]; then
	echo "No builds running.";
elif [ "${#logs[@]}" -eq 1 ]; then
	tail -f "$logs";
else
	echo -n "Enter a build number (1..${#logs[@]}): ";
	read logNum;

	tail -f "${logs[$logNum]}";
fi;
