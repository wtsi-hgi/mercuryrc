#!/usr/bin/env bash

set -euo pipefail

readonly BINARY="$(readlink -f "$0")"
readonly PROGNAME="$(basename "${BINARY}")"

stderr() {
  local message="$*"
  [[ -t 2 ]] && message="$(tput setaf 1)${message}$(tput sgr0)"
  >&2 echo "${message}"
}

commands() {
  # Available commands
  sed -n "/^#@/,/^#@/p" "${BINARY}" \
  | grep -Po "(?<=^command_).+(?=\(\))"
}

has_command() {
  # Check the supplied function exists in this script
  local command="$1"
  commands | grep -Fxq "${command}"
}

usage() {
  local commands="$(commands | paste -sd "|" -)"
  >&2 echo "Usage: ${PROGNAME} [${commands}] GROUP"
  exit 1
}

########################################################################

ldap_search() {
  # LDAP search string for groups, users or humgen groups
  local class="$1"
  local id="$2"

  case "${class}" in
    "group")  echo "(&(objectClass=posixGroup)(cn=${id}))";;
    "user")   echo "(&(objectClass=posixAccount)(uid=${id}))";;
    "humgen") echo "(&(objectClass=sangerHumgenProjectGroup)$(ldap_search group "${id}"))";;
  esac
}

ldap_entry() {
  # Get LDAP attributes for entry
  local search="$(ldap_search "$1" "$2")"

  shift 2
  local -a attrs=("$@")

  ldapsearch -xLLL "${search}" "${attrs[@]}" \
  | awk '
    BEGIN { FS = ": "; OFS = "\t" }
    $0 && $1 != "dn" { print $1, $2 }
  '
}

posix_group_id() {
  local group="$1"
  getent group "${group}" | cut -d: -f3
}

#@ Subcommands #########################################################

command_show() {
  local group="$1"

  _heading() {
    local heading="$*"
    [[ -t 1 ]] && heading="$(tput bold)${heading}$(tput sgr0)"
    echo "${heading}"
  }

  _bullet() {
    sed 's/^/- /'
  }

  _user_dn_to_uid() {
    awk '
      BEGIN { FS = "="; RS = "[,\n]" }
      $1 == "uid" { print $2 }
    '
  }

  _human_name() {
    local uid
    local remainder

    while read -r uid remainder; do
      ldap_entry user "${uid}" uid cn \
      | awk -v REMAINDER="${remainder}" '
        BEGIN { FS = OFS = "\t" }
        { user[$1] = $2 }
        END { print user["cn"] " (" user["uid"] ")", REMAINDER }
      '
    done
  }

  _is_humgen() {
    ldap_entry humgen "${group}" \
    | grep -q .
  }

  _ldap_group_members() {
    ldap_entry group "${group}" memberUid \
    | cut -f2 \
    | sort
  }

  _posix_group_members() {
    local gid="$(posix_group_id "${group}")"

    getent passwd \
    | awk -v GID="${gid}" '
      BEGIN { FS = ":" }
      $4 == GID { print $1 }
    ' \
    | sort
  }

  if _is_humgen; then
    _heading "PI"
    ldap_entry group "${group}" sangerProjectPI \
    | cut -f2 \
    | _user_dn_to_uid \
    | _human_name \
    | _bullet
  else
    stderr "This is not a Human Genetics Programme group!"
  fi

  echo
  _heading "Owners"
  ldap_entry group "${group}" owner \
  | cut -f2 \
  | sort \
  | _user_dn_to_uid \
  | _human_name \
  | _bullet

  echo
  _heading "Members"
  _ldap_group_members \
  | comm --output-delimiter=$'\t' - <(_posix_group_members) \
  | awk '
    BEGIN { FS = OFS = "\t" }
    { print $NF, NF == 2 }
  ' \
  | _human_name \
  | _bullet \
  | awk '
    BEGIN { FS = "\t"; broken = 0 }
    $2 { $1 = $1 " *"; broken = 1 }
    { print $1 }
    END { if (broken) exit 1 }
  ' \
  || {
    echo
    stderr "(*) These users are not members of the LDAP group!"
  }
}

command_edit() {
  local group="$1"

  _group_editable() {
    ldap_entry group "${group}" owner \
    | cut -f2 \
    | grep -Fxq "uid=mercury,ou=people,dc=sanger,dc=ac,dc=uk"
  }

  if ! _group_editable "${group}"; then
    stderr "Cannot edit group \"${group}\"!"
    exit 1
  fi

  HOME=/hgi/home/mercury ldapvi "$(ldap_search group "${group}")"
}

#@ Entrypoint ##########################################################

main() {
  local -a args=("$@")
  local default="$(commands | head -n1)"

  # Argument parsing
  (( $# < 2 )) && args=("${default}" "${args[@]}")
  ! has_command "${args[0]}" || (( ${#args[@]} != 2 )) && usage

  local command="command_${args[0]}"
  local group="${args[1]}"

  # Sanity check
  if ! posix_group_id "${group}" >/dev/null; then
    stderr "No such group \"${group}\"!"
    exit 1
  fi

  "${command}" "${group}"
}

main "$@"
